
#include "Ball.h"
const int PPM = 30;
const int MaxXY = 20000;
const int GroundStep = 20;
int CBall::n = 0;

#define b2_velocityThreshold = 0.1;
CBall::CBall(b2World & world) {
	m_shape = sf::CircleShape(PPM);
	m_shape.setOrigin(PPM, PPM);
	m_shape.setFillColor(sf::Color(255, 0, 255, 255));
	m_bodyDef.position.Set(300.0f / PPM, 400.0f / PPM - n * 5 / PPM);
	m_bodyDef.type = b2_dynamicBody;
	m_bodyDef.fixedRotation = true;
	m_bodyShape.m_p.Set(0, 0);
	m_bodyShape.m_radius=1.0f;
	m_bodyFix.shape = &m_bodyShape;
	m_bodyFix.density = 20;
	m_bodyFix.friction = 0.3f;
	m_bodyFix.restitution = 1.0f;
	m_body = world.CreateBody(&m_bodyDef);
	m_body->CreateFixture(&m_bodyFix);
}

void CBall::SetWorld(b2World & world) {
	m_body = world.CreateBody(&m_bodyDef);
	m_body->CreateFixture(&m_bodyFix);
}

CBall::CBall() {
	m_shape = sf::CircleShape(PPM);
	m_shape.setOrigin(PPM, PPM);
	m_shape.setFillColor(randColor());
	m_bodyDef.position.Set(300.0f / PPM, 400.0f / PPM - n * 5 / PPM);
	n++;
	m_bodyDef.type = b2_dynamicBody;
	m_bodyShape.m_p.Set(0, 0);
	m_bodyShape.m_radius = 1.0f;
	m_bodyFix.shape = &m_bodyShape;
	m_bodyFix.density = 20;
	m_bodyFix.friction = 0.3f;
	m_bodyFix.restitution = 1.0f;
	

}

b2Body* CBall::GetBody() {
	return m_body;
}

sf::Shape & CBall::GetShape() {
	return m_shape;
}

void CBall::update() {
	m_shape.setRotation(m_body->GetAngle());
	m_shape.setPosition(m_body->GetPosition().x*PPM, m_body->GetPosition().y*PPM);
}

void CBall::ResetPosition(b2World & world) {
	//destroy stuff (memory management, otherwise they build up)
	m_body->DestroyFixture(m_body->GetFixtureList());
	world.DestroyBody(m_body);
	n++;
	//m_shape.SetOrigin(5,5); 
	m_bodyDef.position.Set(300.0f / PPM, 400.0f / PPM - n * 10 / PPM);
	m_bodyDef.angularVelocity = 0;
	//m_bodyDef.angle = 270;
	m_bodyDef.linearVelocity.Set(0, 60);
	//reset fixture and body
	SetWorld(world);
	//reset shape
	update();
}

void CBall::jump(float angle) {
	b2Vec2 velocity;
	velocity.y = -angle;
	velocity.x = -angle;
	m_body->SetLinearVelocity(velocity);
}

CBall::~CBall()
{
}


sf::Color randColor() {
	int color = rand() % 10;
	switch (color) {
	case 1:
		return sf::Color::Blue;
		break;
	case 2:
		return sf::Color::Red;
		break;
	case 3:
		return sf::Color::Yellow;
		break;
	case 4:
		return sf::Color::Cyan;
		break;
	case 5:
		return sf::Color::Green;
		break;
	case 6:
		return sf::Color::Magenta;
		break;
	case 7:
		return sf::Color(120, 59, 25); //brownish
		break;
	case 8:
		return sf::Color(25, 59, 25);
		break;
	case 9:
		return sf::Color(25, 150, 125);
		break;
	default:
		return sf::Color(220, 159, 125);
		break;
	}

}
